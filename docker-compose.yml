# -----------------------------------------------------------------------------
# MyWebIntelligence — Docker Compose
# -----------------------------------------------------------------------------
# Objectif
# - Démarrer l’app rapidement avec un dossier de données persistant sur l’hôte.
# - Aucune modification de code requise pour choisir l’emplacement des données.
#
# Où vont les données ?
# - Côté hôte (votre machine) : variable .env `HOST_DATA_DIR` (par défaut ./data)
# - Côté conteneur : chemin fixe /app/data (recommandé)
# - L’app utilise `settings.data_location` qui vaut "data" par défaut et 
#   se résout côté conteneur vers /app/data. On peut aussi surcharger avec
#   l’ENV `MYWI_DATA_DIR` (déjà positionnée ci‑dessous).
#
# Exemples de .env (copier .env.example → .env) :
#   # Par défaut, stocker dans ./data du dépôt
#   HOST_DATA_DIR=./data
#   
#   # macOS/Linux – dossier en dehors du dépôt
#   # HOST_DATA_DIR=/Users/vous/mywi_data
#   
#   # Windows – dossier en dehors du dépôt
#   # HOST_DATA_DIR=C:/Users/Vous/mywi_data
#
# Commandes utiles :
#   docker compose up -d --build
#   docker compose exec mwi python mywi.py db setup
#   docker compose exec mwi python mywi.py land crawl --name=LAND
# -----------------------------------------------------------------------------

services:
  mwi:
    build:
      context: .
      args:
        # Build-time toggles (optional)
        # WITH_ML=1 pour installer les extras ML (FAISS + transformers)
        - WITH_ML=${MYWI_WITH_ML:-0}
        # WITH_PLAYWRIGHT_BROWSERS=1 pour pré-installer les navigateurs Playwright
        - WITH_PLAYWRIGHT_BROWSERS=${MYWI_WITH_PLAYWRIGHT_BROWSERS:-0}
    image: mwi:latest
    container_name: mwi
    environment:
      - PYTHONUNBUFFERED=1
      - TZ=${TZ:-UTC}
      # Chemin interne utilisé par l’app (ne pas changer sauf besoin avancé)
      # settings.py lit MYWI_DATA_DIR (fallback sur "data") → /app/data
      - MYWI_DATA_DIR=/app/data
      # Variables MWI_* passées au conteneur (optionnelles, définies dans .env)
      - MWI_OPENROUTER_ENABLED=${MWI_OPENROUTER_ENABLED:-}
      - MWI_OPENROUTER_API_KEY=${MWI_OPENROUTER_API_KEY:-}
      - MWI_OPENROUTER_MODEL=${MWI_OPENROUTER_MODEL:-}
      - MWI_OPENROUTER_TIMEOUT=${MWI_OPENROUTER_TIMEOUT:-}
      - MWI_OPENROUTER_MIN_CHARS=${MWI_OPENROUTER_MIN_CHARS:-}
      - MWI_OPENROUTER_MAX_CHARS=${MWI_OPENROUTER_MAX_CHARS:-}
      - MWI_OPENROUTER_MAX_CALLS=${MWI_OPENROUTER_MAX_CALLS:-}
      - MWI_SEORANK_API_BASE_URL=${MWI_SEORANK_API_BASE_URL:-}
      - MWI_SEORANK_API_KEY=${MWI_SEORANK_API_KEY:-}
      - MWI_SERPAPI_API_KEY=${MWI_SERPAPI_API_KEY:-}
      - MWI_EMBED_PROVIDER=${MWI_EMBED_PROVIDER:-}
      - MWI_EMBED_MODEL=${MWI_EMBED_MODEL:-}
      - MWI_EMBED_API_URL=${MWI_EMBED_API_URL:-}
      - MWI_OPENAI_API_KEY=${MWI_OPENAI_API_KEY:-}
      - MWI_MISTRAL_API_KEY=${MWI_MISTRAL_API_KEY:-}
      - MWI_GEMINI_API_KEY=${MWI_GEMINI_API_KEY:-}
      - MWI_HF_API_KEY=${MWI_HF_API_KEY:-}
      - MWI_OLLAMA_BASE_URL=${MWI_OLLAMA_BASE_URL:-}
      - MWI_NLI_MODEL_NAME=${MWI_NLI_MODEL_NAME:-}
      - MWI_NLI_BACKEND=${MWI_NLI_BACKEND:-}
      - MWI_NLI_TORCH_THREADS=${MWI_NLI_TORCH_THREADS:-}
      - MWI_NLI_FALLBACK_MODEL_NAME=${MWI_NLI_FALLBACK_MODEL_NAME:-}
      - MWI_SIMILARITY_BACKEND=${MWI_SIMILARITY_BACKEND:-}
      - MWI_SIMILARITY_TOP_K=${MWI_SIMILARITY_TOP_K:-}
      - MWI_NLI_ENTAILMENT_THRESHOLD=${MWI_NLI_ENTAILMENT_THRESHOLD:-}
      - MWI_NLI_CONTRADICTION_THRESHOLD=${MWI_NLI_CONTRADICTION_THRESHOLD:-}
    volumes:
      # Mappage volume : HOST:CONTAINER
      # - source (HOST_DATA_DIR) : dossier sur votre machine (défaut ./data)
      # - target (/app/data)     : dossier interne attendu par l’app
      - type: bind
        source: ${HOST_DATA_DIR:-./data}
        target: /app/data
    tty: true
    stdin_open: true
    restart: unless-stopped
    command: ["tail", "-f", "/dev/null"]

  # Optional: one-shot helper to install Playwright browsers post-build
  # Use: docker compose run --rm playwright-setup
  playwright-setup:
    image: mwi:latest
    depends_on:
      - mwi
    environment:
      - MYWI_DATA_DIR=/app/data
    volumes:
      # Utilise le même dossier de données que le service principal
      - type: bind
        source: ${HOST_DATA_DIR:-./data}
        target: /app/data
    entrypoint: ["python", "install_playwright.py"]
    profiles: ["tools"]

  # Optional: ephemeral runner for direct commands without attaching to mwi
  # Use: docker compose run --rm mwi-run python mywi.py db setup
  mwi-run:
    image: mwi:latest
    environment:
      - MYWI_DATA_DIR=/app/data
      - MWI_OPENROUTER_ENABLED=${MWI_OPENROUTER_ENABLED:-}
      - MWI_OPENROUTER_API_KEY=${MWI_OPENROUTER_API_KEY:-}
      - MWI_OPENROUTER_MODEL=${MWI_OPENROUTER_MODEL:-}
      - MWI_OPENROUTER_TIMEOUT=${MWI_OPENROUTER_TIMEOUT:-}
      - MWI_OPENROUTER_MIN_CHARS=${MWI_OPENROUTER_MIN_CHARS:-}
      - MWI_OPENROUTER_MAX_CHARS=${MWI_OPENROUTER_MAX_CHARS:-}
      - MWI_OPENROUTER_MAX_CALLS=${MWI_OPENROUTER_MAX_CALLS:-}
      - MWI_SEORANK_API_BASE_URL=${MWI_SEORANK_API_BASE_URL:-}
      - MWI_SEORANK_API_KEY=${MWI_SEORANK_API_KEY:-}
      - MWI_SERPAPI_API_KEY=${MWI_SERPAPI_API_KEY:-}
      - MWI_EMBED_PROVIDER=${MWI_EMBED_PROVIDER:-}
      - MWI_EMBED_MODEL=${MWI_EMBED_MODEL:-}
      - MWI_EMBED_API_URL=${MWI_EMBED_API_URL:-}
      - MWI_OPENAI_API_KEY=${MWI_OPENAI_API_KEY:-}
      - MWI_MISTRAL_API_KEY=${MWI_MISTRAL_API_KEY:-}
      - MWI_GEMINI_API_KEY=${MWI_GEMINI_API_KEY:-}
      - MWI_HF_API_KEY=${MWI_HF_API_KEY:-}
      - MWI_OLLAMA_BASE_URL=${MWI_OLLAMA_BASE_URL:-}
      - MWI_NLI_MODEL_NAME=${MWI_NLI_MODEL_NAME:-}
      - MWI_NLI_BACKEND=${MWI_NLI_BACKEND:-}
      - MWI_NLI_TORCH_THREADS=${MWI_NLI_TORCH_THREADS:-}
      - MWI_NLI_FALLBACK_MODEL_NAME=${MWI_NLI_FALLBACK_MODEL_NAME:-}
      - MWI_SIMILARITY_BACKEND=${MWI_SIMILARITY_BACKEND:-}
      - MWI_SIMILARITY_TOP_K=${MWI_SIMILARITY_TOP_K:-}
      - MWI_NLI_ENTAILMENT_THRESHOLD=${MWI_NLI_ENTAILMENT_THRESHOLD:-}
      - MWI_NLI_CONTRADICTION_THRESHOLD=${MWI_NLI_CONTRADICTION_THRESHOLD:-}
    volumes:
      # Runner éphémère pour exécuter une commande ponctuelle
      - type: bind
        source: ${HOST_DATA_DIR:-./data}
        target: /app/data
    entrypoint: ["bash", "-lc"]
    profiles: ["tools"]
